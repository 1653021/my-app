{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Board","i","this","props","squares","winner","board","arr_row","rows","row","cols","col","arr_col","val_key","array_for_win","isValidSquareForWinner","postion_for_win","length","push","key","renderSquare","initialBoard","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","typeSort","e","step","setState","allMove","document","getElementsByClassName","move","moveObj","item","replace","id","target","getElementById","classList","add","slice","calculateWinner","concat","currentHistory","moves","map","description","keyMove","currentSelectedMove","jumpTo","reverse","status","isFullBoard","player","handleClick","changeTypeSort","minu","a","b","min","c","conditionWin","conditionRow","conditionCol","j","validConditionRow","splice","validConditionCol","arr_condition_diagonal","ROW","COL","arr_condition_diagonalOrder","line","condition_each_diagonal","start_col","count","diagonalOrder","child_diagonal","position_diagonal","valid_child_diagonal","arr_condition_diagonal_right","num_row","arr_condition","num_col","console","log","diagonalOrderRight","isWin","position","next_position","ReactDOM","render"],"mappings":"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","file":"static/js/main.8bc613af.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square({ value, onClick }) {\n    return (\n        <button className=\"square\" onClick={onClick}>\n            {value}\n        </button>\n    );\n}\n\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={ () => this.props.onClick(i)}\n            />\n        );\n    }\n\n    initialBoard(winner) {\n        const board = []\n        const arr_row = []\n        const rows = this.props.row\n        const cols = this.props.col\n\n        for (let row = 0; row < rows; row++) {\n            let arr_col = []\n            for (let col = 0; col < cols; col++) {\n                const val_key = row * rows + col\n                if(winner !== null && winner.array_for_win && winner.array_for_win !== null){\n                    let isValidSquareForWinner = false\n                    for(let postion_for_win = 0; postion_for_win < winner.array_for_win.length; postion_for_win++){\n                        const square_win = winner.array_for_win[postion_for_win]\n                        if(val_key === square_win){\n                            isValidSquareForWinner = true\n                            \n                        }\n                    }\n                    if(isValidSquareForWinner){\n                        arr_col.push(\n                            <span key={'col_' + val_key} className='winner'>\n                                {this.renderSquare(val_key)}\n                            </span>\n                        )\n                    }\n                    else{\n                        arr_col.push(\n                            <span key={'col_' + val_key}>\n                                {this.renderSquare(val_key)}\n                            </span>\n                        )\n                    }\n                }\n                else {\n                    arr_col.push(\n                        <span key={'col_' + val_key}>\n                            {this.renderSquare(val_key)}\n                        </span>\n                    )\n                }\n            }\n\n            arr_row.push(\n                <div className='board-row' key={row}>\n                    {arr_col}\n                </div>\n            )\n        }\n        board.push(\n            <div key={'main-board'} className='main-boar'>\n                {arr_row}\n            </div>\n        )\n        return board\n    }\n\n    render() {\n        return (\n            <div>\n                <div className='board'>\n                    {this.initialBoard(this.props.winner)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            rows: 6,\n            cols: 6,\n            history: [{  \n                squares: Array(6 * 6).fill(null),\n            },],\n            xIsNext: true,\n            stepNumber: 0,\n            typeSort: true, //true: Descending, false: Ascending\n        }\n    }\n\n    jumpTo(e, step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        })\n\n        const allMove = document.getElementsByClassName('move');\n        for(let move = 0; move < allMove.length; move++){\n            let moveObj = allMove.item(move)\n            moveObj.className = moveObj.className.replace(/\\bcurrent-select-move\\b/g, \"\");\n        }\n\n        const id = e.target.id;\n        const currentMove = document.getElementById(id)\n        currentMove.classList.add(\"current-select-move\");\n    }\n\n    handleClick(i) {\n        const { rows, cols, stepNumber } = this.state;\n        const history = this.state.history.slice(0, stepNumber + 1);\n        const currentHistory = history[history.length - 1] ;\n        const squares = currentHistory.squares.slice();\n        if (calculateWinner(squares, rows, cols) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n\n        const allMove = document.getElementsByClassName('move');\n        for(let move = 0; move < allMove.length; move++){\n            let moveObj = allMove.item(move)\n            moveObj.className = moveObj.className.replace(/\\bcurrent-select-move\\b/g, \"\");\n        }\n    }\n\n    changeTypeSort() {\n        const { typeSort } = this.state;\n        this.setState({\n            typeSort: !typeSort\n        })\n    }\n\n    render() {\n        const { history, xIsNext, rows, cols, stepNumber, typeSort } = this.state;\n        const currentHistory = history[stepNumber]\n\n        const winner = calculateWinner(currentHistory.squares, rows, cols);\n        let moves = history.map( (step, move) => {\n            const description = move ? 'Go to move ' + move : \"Start\";\n            const keyMove = 'Move-' + move\n            const currentSelectedMove = (move === (history.length - 1)) ? true : false\n            return (\n                <li key={ keyMove } >\n                    <button id={ keyMove } className={currentSelectedMove ? 'current-select-move move' : 'move'} onClick={ (e) => this.jumpTo(e, move)}>\n                        {description}\n                    </button>\n                </li>\n            );\n        });\n\n        if(!typeSort) {\n            moves = moves.reverse();\n        }\n\n        let status = '';\n        if(winner && winner.isFullBoard && winner.isFullBoard === true){\n            status = 'Draw';\n        }\n        else if (winner) {\n            status = 'Winner: ' + winner.player;\n        } \n        else {\n            status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <div className='status-game'>\n                        { status }\n                    </div>\n                    <div className='board'>\n                        <Board row={rows} col={cols} winner={ winner } \n                            onClick={ (e, i) => this.handleClick(e, i) }\n                            squares={currentHistory.squares}\n                        />\n                    </div>\n                </div>\n                <div className=\"game-info\">\n                    <div className='title-history-move'>\n                        History Moves\n                    </div>\n                    <div className='wrap-sort'>\n                        <div className='title-sort'>\n                            Sort:\n                        </div>\n                        <div className='wrap-btn-sort'>\n                            <button id='btn-sort' onClick={() => { this.changeTypeSort() }}> \n                                { typeSort ? 'Descending' : 'Ascending'}\n                            </button>\n                        </div>\n                    </div>\n                    <div className='wrap-history-move'>\n                        <ol>\n                            { moves }\n                        </ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n//https://www.geeksforgeeks.org/zigzag-or-diagonal-traversal-of-matrix/\n// A utility function to find min of two integers \nfunction minu(a, b) \n{ return (a < b)? a: b; } \n  \n// A utility function to find min of three integers \nfunction min(a, b, c) \n{ return minu(minu(a, b), c);} \n  \n// A utility function to find max of two integers \nfunction max(a, b) \n{ return (a > b)? a: b; } \n\n// The main function that prints given matrix in diagonal order \nfunction diagonalOrder(ROW, COL) \n{ \n    let arr_condition_diagonalOrder = []\n    // There will be ROW+COL-1 lines in the output \n    for (let line=1; line<=(ROW + COL -1); line++) \n    { \n        // Left\n        let condition_each_diagonal = []\n\n        /* Get column index of the first element in this line of output. \n           The index is 0 for first ROW lines and line - ROW for remaining \n           lines  */\n        let start_col =  max(0, line-ROW); \n  \n        /* Get count of elements in this line. The count of elements is \n           equal to minimum of line number, COL-start_col and ROW */\n        let count = min(line, (COL-start_col), ROW); \n\n\n        /* Print elements of this line */\n        for (let j=0; j<count; j++){\n            condition_each_diagonal.push((minu(ROW, line)-j-1) * ROW + (start_col+j))\n        } \n  \n        /* Ptint elements of next diagonal on next line */\n        arr_condition_diagonalOrder.push(condition_each_diagonal)\n    } \n    return arr_condition_diagonalOrder\n} \n\nfunction diagonalOrderRight(ROW, COL) \n{ \n    let arr_condition_diagonalOrder = []\n    \n    for(let row = ROW * COL - COL, num_row = 0; row >= 0 ; row -= COL, num_row++){\n        let arr_condition = []\n        arr_condition.push(row)\n        for(let col = 1; col <= num_row; col++ ){\n            arr_condition.push(row + COL*col + col)\n        }\n        arr_condition_diagonalOrder.push(arr_condition)\n    }    \n\n    for(let col = COL - 1, num_col = 0; col > 0 ; col--, num_col++){\n        let arr_condition = [] \n        arr_condition.push(col)\n        for(let row = 1; row <= num_col; row++ ){\n            arr_condition.push(col + COL*row + row)\n        }\n        arr_condition_diagonalOrder.push(arr_condition)\n    }\n    console.log(arr_condition_diagonalOrder)\n    return arr_condition_diagonalOrder\n} \n\nfunction calculateWinner(squares, rows, cols) {\n    let conditionWin = []\n    // Condition for rows - cols\n    for(let i = 0; i < rows; i++){\n        let conditionRow = []\n        let conditionCol = []\n        for(let j = 0; j < cols; j++){\n            conditionRow.push(i*rows + j)\n            if(conditionRow.length > 4){\n                const validConditionRow = [...conditionRow]\n                conditionWin.push(validConditionRow)\n                conditionRow.splice(0, 1)\n            }\n\n            conditionCol.push(j*cols + i)\n            if(conditionCol.length > 4){\n                const validConditionCol = [...conditionCol]\n                conditionWin.push(validConditionCol)\n                conditionCol.splice(0, 1)\n            }\n        }\n    }\n\n    // Condition for diagonal line\n    const arr_condition_diagonal = diagonalOrder(rows, cols)\n    for(let i = 0 ; i < arr_condition_diagonal.length; i++){\n        if(arr_condition_diagonal[i] === 4){\n            conditionWin.push(arr_condition_diagonal[i])\n        }\n        else if(arr_condition_diagonal[i].length > 4){\n            let child_diagonal = []\n            for(let position_diagonal = 0; position_diagonal < arr_condition_diagonal[i].length; position_diagonal++){\n                child_diagonal.push(arr_condition_diagonal[i][position_diagonal])\n                if(child_diagonal.length > 4){\n                    const valid_child_diagonal = [...child_diagonal]\n                    conditionWin.push(valid_child_diagonal)\n                    child_diagonal.splice(0, 1)\n                }\n            }\n        }\n    }\n\n    const arr_condition_diagonal_right = diagonalOrderRight(rows, cols)\n    for(let i = 0 ; i < arr_condition_diagonal_right.length; i++){\n        if(arr_condition_diagonal_right[i] === 4){\n            conditionWin.push(arr_condition_diagonal_right[i])\n        }\n        else if(arr_condition_diagonal_right[i].length > 4){\n            let child_diagonal = []\n            for(let position_diagonal = 0; position_diagonal < arr_condition_diagonal_right[i].length; position_diagonal++){\n                child_diagonal.push(arr_condition_diagonal_right[i][position_diagonal])\n                if(child_diagonal.length > 4){\n                    const valid_child_diagonal = [...child_diagonal]\n                    conditionWin.push(valid_child_diagonal)\n                    child_diagonal.splice(0, 1)\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < conditionWin.length; i++) {\n        if(conditionWin[i].length === 5){\n            let isWin = true\n\n            for(let j = 0; j < conditionWin[i].length -1; j++){\n                const position = conditionWin[i][j]\n                const next_position = conditionWin[i][j+1]\n                if(!(squares[position] && squares[position] === squares[next_position])){\n                    isWin = false\n                }\n            }\n\n            if(isWin === true){\n                const result = {\n                    player: squares[conditionWin[i][0]],\n                    array_for_win: conditionWin[i]\n                }\n                return result\n            }\n        }\n    }\n    let isFullBoard = true\n    for(let i = 0; i < squares.length; i++){\n        if(squares[i] === null){\n            isFullBoard = false\n        }\n    } \n    \n    if(isFullBoard === true){\n        const resultFullBoar = {\n            isFullBoard: true\n        }\n        return resultFullBoar\n    }\n    return null\n}\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}